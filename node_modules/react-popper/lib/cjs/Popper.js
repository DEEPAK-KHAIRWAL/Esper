"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = Popper;
exports.InnerPopper = void 0;

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _deepEqual = _interopRequireDefault(require("deep-equal"));

var React = _interopRequireWildcard(require("react"));

var _core = require("@popperjs/core");

var _Manager = require("./Manager");

var _utils = require("./utils");

function _createSuper(Derived) { return function () { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var initialPopperStyle = {
  top: 0,
  left: 0,
  opacity: 0,
  pointerEvents: 'none'
};
var initialArrowStyle = {};

var InnerPopper = /*#__PURE__*/function (_React$Component) {
  (0, _inheritsLoose2["default"])(InnerPopper, _React$Component);

  var _super = _createSuper(InnerPopper);

  function InnerPopper() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "state", {
      placement: undefined,
      styles: undefined,
      isReferenceHidden: undefined,
      hasPopperEscaped: undefined
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "popperInstance", void 0);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "popperNode", null);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "arrowNode", null);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "setPopperNode", function (popperNode) {
      if (!popperNode || _this.popperNode === popperNode) return;
      (0, _utils.setRef)(_this.props.innerRef, popperNode);
      _this.popperNode = popperNode;

      _this.updatePopperInstance();
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "setArrowNode", function (arrowNode) {
      _this.arrowNode = arrowNode;
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "updateStateModifier", {
      name: 'reactPopperState',
      enabled: true,
      phase: 'write',
      fn: function fn(_ref) {
        var state = _ref.state;
        var placement = state.placement,
            styles = state.styles,
            modifiersData = state.modifiersData;
        var isReferenceHidden;
        var hasPopperEscaped;

        if (modifiersData.hide) {
          isReferenceHidden = modifiersData.hide.isReferenceHidden;
          hasPopperEscaped = modifiersData.hide.hasPopperEscaped;
        }

        _this.setState({
          placement: placement,
          styles: styles,
          isReferenceHidden: isReferenceHidden,
          hasPopperEscaped: hasPopperEscaped
        });
      }
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "getOptions", function () {
      var _this$props$modifiers = _this.props.modifiers,
          modifiers = _this$props$modifiers === void 0 ? [] : _this$props$modifiers;
      var arrowModifier = modifiers.find(function (modifier) {
        return modifier.name === 'arrow';
      });
      return {
        placement: _this.props.placement,
        strategy: _this.props.strategy,
        modifiers: [].concat(modifiers.filter(function (modifier) {
          return modifier.name !== 'arrow';
        }), [{
          name: 'arrow',
          enabled: !!_this.arrowNode,
          options: (0, _extends2["default"])({}, arrowModifier && arrowModifier.options, {
            element: _this.arrowNode
          })
        }, {
          name: 'applyStyles',
          enabled: false
        }, _this.updateStateModifier]),
        onFirstUpdate: _this.props.onFirstUpdate
      };
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "getPopperStyle", function () {
      var computedInitialStyle = (0, _extends2["default"])({}, initialPopperStyle, {
        position: _this.props.strategy === 'fixed' ? 'fixed' : 'absolute'
      });
      return !_this.popperNode || !_this.state.styles ? computedInitialStyle : _this.state.styles.popper;
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "getArrowStyle", function () {
      return !_this.arrowNode || !_this.state.styles ? initialArrowStyle : _this.state.styles.arrow;
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "destroyPopperInstance", function () {
      if (!_this.popperInstance) return;

      _this.popperInstance.destroy();

      _this.popperInstance = null;
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "updatePopperInstance", function () {
      _this.destroyPopperInstance();

      var _assertThisInitialize = (0, _assertThisInitialized2["default"])(_this),
          popperNode = _assertThisInitialize.popperNode;

      var referenceElement = _this.props.referenceElement;
      if (!referenceElement || !popperNode) return;
      _this.popperInstance = (0, _core.createPopper)(referenceElement, popperNode, _this.getOptions());
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "update", function () {
      if (_this.popperInstance) {
        return _this.popperInstance.update();
      } else {
        return Promise.resolve(null);
      }
    });
    return _this;
  }

  var _proto = InnerPopper.prototype;

  _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {
    // If the Popper.js reference element has changed, update the instance (destroy + create)
    if (this.props.referenceElement !== prevProps.referenceElement) {
      this.updatePopperInstance();
    } // If the Popper.js options have changed, set options


    if (this.props.placement !== prevProps.placement || this.props.strategy !== prevProps.strategy || !(0, _deepEqual["default"])(this.props.modifiers, prevProps.modifiers, {
      strict: true
    })) {
      // develop only check that modifiers isn't being updated needlessly
      if (process.env.NODE_ENV === "development") {
        if (this.props.modifiers !== prevProps.modifiers && this.props.modifiers != null && prevProps.modifiers != null && (0, _utils.shallowEqual)(this.props.modifiers, prevProps.modifiers)) {
          console.warn("'modifiers' prop reference updated even though all values appear the same.\nConsider memoizing the 'modifiers' object to avoid needless rendering.");
        }
      }

      if (this.popperInstance) {
        this.popperInstance.setOptions(this.getOptions());
      }
    } // A placement difference in state means popper determined a new placement
    // apart from the props value. By the time the popper element is rendered with
    // the new position Popper has already measured it, if the place change triggers
    // a size change it will result in a misaligned popper. So we schedule an update to be sure.


    if (prevState.placement !== this.state.placement) {
      this.update();
    }
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    (0, _utils.setRef)(this.props.innerRef, null);
    this.destroyPopperInstance();
  };

  _proto.render = function render() {
    var _this$state = this.state,
        placement = _this$state.placement,
        isReferenceHidden = _this$state.isReferenceHidden,
        hasPopperEscaped = _this$state.hasPopperEscaped;
    return (0, _utils.unwrapArray)(this.props.children)({
      ref: this.setPopperNode,
      style: this.getPopperStyle(),
      placement: placement,
      isReferenceHidden: isReferenceHidden,
      hasPopperEscaped: hasPopperEscaped,
      update: this.update,
      arrowProps: {
        ref: this.setArrowNode,
        style: this.getArrowStyle()
      }
    });
  };

  return InnerPopper;
}(React.Component);

exports.InnerPopper = InnerPopper;
(0, _defineProperty2["default"])(InnerPopper, "defaultProps", {
  placement: 'bottom',
  strategy: 'absolute',
  modifiers: [],
  referenceElement: undefined
});

function Popper(_ref2) {
  var referenceElement = _ref2.referenceElement,
      props = (0, _objectWithoutPropertiesLoose2["default"])(_ref2, ["referenceElement"]);
  return /*#__PURE__*/React.createElement(_Manager.ManagerReferenceNodeContext.Consumer, null, function (referenceNode) {
    return /*#__PURE__*/React.createElement(InnerPopper, {
      referenceElement: referenceElement !== undefined ? referenceElement : referenceNode,
      children: props.children,
      innerRef: props.innerRef,
      modifiers: props.modifiers,
      placement: props.placement,
      strategy: props.strategy,
      onFirstUpdate: props.onFirstUpdate
    });
  });
}