{"ast":null,"code":"import * as ActionTypes from './ActionTypes';\nimport { baseUrl } from '../shared/baseUrl';\nexport const fetchDevices = () => dispatch => {\n  dispatch(leadersLoading());\n  return fetch(baseUrl + 'leaders').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(leaders => dispatch(addLeaders(leaders))).catch(error => dispatch(leadersFailed(error.message)));\n};\nexport const devicesLoading = () => ({\n  type: ActionTypes.LEADERS_LOADING\n});\nexport const devicesFailed = errmess => ({\n  type: ActionTypes.LEADERS_FAILED,\n  payload: errmess\n});\nexport const addDevices = leaders => ({\n  type: ActionTypes.ADD_LEADERS,\n  payload: leaders\n});","map":{"version":3,"sources":["C:/Users/Deepak.Khairwal/Downloads/Esper/src/redux/ActionCreators.js"],"names":["ActionTypes","baseUrl","fetchDevices","dispatch","leadersLoading","fetch","then","response","ok","error","Error","status","statusText","errmess","message","json","leaders","addLeaders","catch","leadersFailed","devicesLoading","type","LEADERS_LOADING","devicesFailed","LEADERS_FAILED","payload","addDevices","ADD_LEADERS"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,eAA7B;AACA,SAASC,OAAT,QAAwB,mBAAxB;AAGA,OAAO,MAAMC,YAAY,GAAG,MAAOC,QAAD,IAAc;AAE5CA,EAAAA,QAAQ,CAACC,cAAc,EAAf,CAAR;AAEA,SAAOC,KAAK,CAACJ,OAAO,GAAG,SAAX,CAAL,CACNK,IADM,CACDC,QAAQ,IAAI;AACd,QAAIA,QAAQ,CAACC,EAAb,EAAiB;AACf,aAAOD,QAAP;AACD,KAFD,MAEO;AACL,UAAIE,KAAK,GAAG,IAAIC,KAAJ,CAAU,WAAWH,QAAQ,CAACI,MAApB,GAA6B,IAA7B,GAAoCJ,QAAQ,CAACK,UAAvD,CAAZ;AACAH,MAAAA,KAAK,CAACF,QAAN,GAAiBA,QAAjB;AACA,YAAME,KAAN;AACD;AACF,GATI,EAULA,KAAK,IAAI;AACH,QAAII,OAAO,GAAG,IAAIH,KAAJ,CAAUD,KAAK,CAACK,OAAhB,CAAd;AACA,UAAMD,OAAN;AACL,GAbI,EAcNP,IAdM,CAcDC,QAAQ,IAAIA,QAAQ,CAACQ,IAAT,EAdX,EAeNT,IAfM,CAeDU,OAAO,IAAIb,QAAQ,CAACc,UAAU,CAACD,OAAD,CAAX,CAflB,EAgBNE,KAhBM,CAgBAT,KAAK,IAAIN,QAAQ,CAACgB,aAAa,CAACV,KAAK,CAACK,OAAP,CAAd,CAhBjB,CAAP;AAiBH,CArBM;AAuBP,OAAO,MAAMM,cAAc,GAAG,OAAO;AACjCC,EAAAA,IAAI,EAAErB,WAAW,CAACsB;AADe,CAAP,CAAvB;AAIP,OAAO,MAAMC,aAAa,GAAIV,OAAD,KAAc;AACvCQ,EAAAA,IAAI,EAAErB,WAAW,CAACwB,cADqB;AAEvCC,EAAAA,OAAO,EAAEZ;AAF8B,CAAd,CAAtB;AAKP,OAAO,MAAMa,UAAU,GAAIV,OAAD,KAAc;AACpCK,EAAAA,IAAI,EAAErB,WAAW,CAAC2B,WADkB;AAEpCF,EAAAA,OAAO,EAAET;AAF2B,CAAd,CAAnB","sourcesContent":["import * as ActionTypes from './ActionTypes';\r\nimport { baseUrl } from '../shared/baseUrl';\r\n\r\n\r\nexport const fetchDevices = () => (dispatch) => {\r\n\r\n    dispatch(leadersLoading());\r\n\r\n    return fetch(baseUrl + 'leaders')\r\n    .then(response => {\r\n        if (response.ok) {\r\n          return response;\r\n        } else {\r\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n          error.response = response;\r\n          throw error;\r\n        }\r\n      },\r\n      error => {\r\n            var errmess = new Error(error.message);\r\n            throw errmess;\r\n      })\r\n    .then(response => response.json())\r\n    .then(leaders => dispatch(addLeaders(leaders)))\r\n    .catch(error => dispatch(leadersFailed(error.message)));\r\n}\r\n\r\nexport const devicesLoading = () => ({\r\n    type: ActionTypes.LEADERS_LOADING\r\n});\r\n\r\nexport const devicesFailed = (errmess) => ({\r\n    type: ActionTypes.LEADERS_FAILED,\r\n    payload: errmess\r\n});\r\n\r\nexport const addDevices = (leaders) => ({\r\n    type: ActionTypes.ADD_LEADERS,\r\n    payload: leaders\r\n});\r\n"]},"metadata":{},"sourceType":"module"}