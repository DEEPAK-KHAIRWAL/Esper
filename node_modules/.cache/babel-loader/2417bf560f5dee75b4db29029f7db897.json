{"ast":null,"code":"import * as ActionTypes from './ActionTypes';\nimport { baseUrlForDevice, baseUrlForGroup } from '../shared/baseUrl';\nexport const fetchDevices = () => dispatch => {\n  dispatch(devicesLoading());\n  return fetch(baseUrlForDevice).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(devices => dispatch(addDevices(devices))).catch(error => dispatch(devicesFailed(error.message)));\n};\nexport const devicesLoading = () => ({\n  type: ActionTypes.DEVICES_LOADING\n});\nexport const devicesFailed = errmess => ({\n  type: ActionTypes.DEVICES_FAILED,\n  payload: errmess\n});\nexport const addDevices = devices => ({\n  type: ActionTypes.ADD_DEVICES,\n  payload: devices\n});\nexport const fetchGroups = () => dispatch => {\n  dispatch(groupsLoading());\n  return fetch(baseUrlForDevice).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(groups => dispatch(addGroups(groups))).catch(error => dispatch(groupsFailed(error.message)));\n};\nexport const groupsLoading = () => ({\n  type: ActionTypes.GROUPS_LOADING\n});\nexport const groupsFailed = errmess => ({\n  type: ActionTypes.GROUPS_FAILED,\n  payload: errmess\n});\nexport const addGroups = groups => ({\n  type: ActionTypes.ADD_GROUPS,\n  payload: groups\n});","map":{"version":3,"sources":["C:/Users/Deepak.Khairwal/Downloads/Esper/src/redux/ActionCreators.js"],"names":["ActionTypes","baseUrlForDevice","baseUrlForGroup","fetchDevices","dispatch","devicesLoading","fetch","then","response","ok","error","Error","status","statusText","errmess","message","json","devices","addDevices","catch","devicesFailed","type","DEVICES_LOADING","DEVICES_FAILED","payload","ADD_DEVICES","fetchGroups","groupsLoading","groups","addGroups","groupsFailed","GROUPS_LOADING","GROUPS_FAILED","ADD_GROUPS"],"mappings":"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","sourcesContent":["import * as ActionTypes from './ActionTypes';\r\nimport { baseUrlForDevice, baseUrlForGroup } from '../shared/baseUrl';\r\n\r\n\r\nexport const fetchDevices = () => (dispatch) => {\r\n\r\n    dispatch(devicesLoading());\r\n\r\n    return fetch(baseUrlForDevice)\r\n    .then(response => {\r\n        if (response.ok) {\r\n          return response;\r\n        } else {\r\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n          error.response = response;\r\n          throw error;\r\n        }\r\n      },\r\n      error => {\r\n            var errmess = new Error(error.message);\r\n            throw errmess;\r\n      })\r\n    .then(response => response.json())\r\n    .then(devices => dispatch(addDevices(devices)))\r\n    .catch(error => dispatch(devicesFailed(error.message)));\r\n}\r\n\r\nexport const devicesLoading = () => ({\r\n    type: ActionTypes.DEVICES_LOADING\r\n});\r\n\r\nexport const devicesFailed = (errmess) => ({\r\n    type: ActionTypes.DEVICES_FAILED,\r\n    payload: errmess\r\n});\r\n\r\nexport const addDevices = (devices) => ({\r\n    type: ActionTypes.ADD_DEVICES,\r\n    payload: devices\r\n});\r\n\r\n\r\nexport const fetchGroups = () => (dispatch) => {\r\n\r\n    dispatch(groupsLoading());\r\n\r\n    return fetch(baseUrlForDevice)\r\n    .then(response => {\r\n        if (response.ok) {\r\n          return response;\r\n        } else {\r\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n          error.response = response;\r\n          throw error;\r\n        }\r\n      },\r\n      error => {\r\n            var errmess = new Error(error.message);\r\n            throw errmess;\r\n      })\r\n    .then(response => response.json())\r\n    .then(groups => dispatch(addGroups(groups)))\r\n    .catch(error => dispatch(groupsFailed(error.message)));\r\n}\r\n\r\nexport const groupsLoading = () => ({\r\n    type: ActionTypes.GROUPS_LOADING\r\n});\r\n\r\nexport const groupsFailed = (errmess) => ({\r\n    type: ActionTypes.GROUPS_FAILED,\r\n    payload: errmess\r\n});\r\n\r\nexport const addGroups = (groups) => ({\r\n    type: ActionTypes.ADD_GROUPS,\r\n    payload: groups\r\n});\r\n"]},"metadata":{},"sourceType":"module"}