{"ast":null,"code":"import * as ActionTypes from './ActionTypes';\nimport { DISHES } from '../shared/dishes';\nimport { baseUrl } from '../shared/baseUrl';\nexport const addFeedback = () => ({\n  type: ActionTypes.ADD_FEEDBACK\n});\nexport const postFeedback = (firstname, lastname, email, telnum, agree, contactType, message) => dispatch => {\n  const newFeedback = {\n    firstname: firstname,\n    lastname: lastname,\n    email: email,\n    telnum: telnum,\n    agree: agree,\n    contactType: contactType,\n    message: message\n  };\n  newFeedback.date = new Date().toISOString();\n  return fetch(baseUrl + 'feedback', {\n    method: \"POST\",\n    body: JSON.stringify(newFeedback),\n    headers: {\n      \"content-Type\": \"application/json\"\n    },\n    credentials: \"same-origin\"\n  }).then(res => {\n    if (res.ok) {\n      return res;\n    } else {\n      var error = new Error('Error ' + res.status + ': ' + res.statusText);\n      error.response = res;\n      throw error;\n    }\n  }, error => {\n    throw error;\n  }).then(response => response.json()).then(res => {\n    console.log(res);\n    alert(JSON.stringify(res));\n    return dispatch(addFeedback());\n  }).catch(error => {\n    console.log('post feedback', error.message);\n    alert('Your feedback could not be sent\\nError: ' + error.message);\n  });\n};\nexport const addComment = comment => ({\n  type: ActionTypes.ADD_COMMENT,\n  payload: comment\n});\nexport const postComment = (dishId, rating, author, comment) => dispatch => {\n  const newComment = {\n    dishId: dishId,\n    rating: rating,\n    author: author,\n    comment: comment\n  };\n  newComment.date = new Date().toISOString();\n  return fetch(baseUrl + 'comments', {\n    method: \"POST\",\n    body: JSON.stringify(newComment),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    credentials: \"same-origin\"\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    throw error;\n  }).then(response => response.json()).then(response => dispatch(addComment(response))).catch(error => {\n    console.log('post comments', error.message);\n    alert('Your comment could not be posted\\nError: ' + error.message);\n  });\n};\nexport const fetchDishes = () => dispatch => {\n  dispatch(dishesLoading(true));\n  return fetch(baseUrl + 'dishes').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(dishes => dispatch(addDishes(dishes))).catch(error => dispatch(dishesFailed(error.message)));\n};\nexport const dishesLoading = () => ({\n  type: ActionTypes.DISHES_LOADING\n});\nexport const dishesFailed = errmess => ({\n  type: ActionTypes.DISHES_FAILED,\n  payload: errmess\n});\nexport const addDishes = dishes => ({\n  type: ActionTypes.ADD_DISHES,\n  payload: dishes\n});\nexport const fetchComments = () => dispatch => {\n  return fetch(baseUrl + 'comments').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(comments => dispatch(addComments(comments))).catch(error => dispatch(commentsFailed(error.message)));\n};\nexport const commentsFailed = errmess => ({\n  type: ActionTypes.COMMENTS_FAILED,\n  payload: errmess\n});\nexport const addComments = comments => ({\n  type: ActionTypes.ADD_COMMENTS,\n  payload: comments\n});\nexport const fetchPromos = () => dispatch => {\n  dispatch(promosLoading());\n  return fetch(baseUrl + 'promotions').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(promos => dispatch(addPromos(promos))).catch(error => dispatch(promosFailed(error.message)));\n};\nexport const promosLoading = () => ({\n  type: ActionTypes.PROMOS_LOADING\n});\nexport const promosFailed = errmess => ({\n  type: ActionTypes.PROMOS_FAILED,\n  payload: errmess\n});\nexport const addPromos = promos => ({\n  type: ActionTypes.ADD_PROMOS,\n  payload: promos\n});\nexport const fetchLeaders = () => dispatch => {\n  dispatch(leadersLoading());\n  return fetch(baseUrl + 'leaders').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(leaders => dispatch(addLeaders(leaders))).catch(error => dispatch(leadersFailed(error.message)));\n};\nexport const leadersLoading = () => ({\n  type: ActionTypes.LEADERS_LOADING\n});\nexport const leadersFailed = errmess => ({\n  type: ActionTypes.LEADERS_FAILED,\n  payload: errmess\n});\nexport const addLeaders = leaders => ({\n  type: ActionTypes.ADD_LEADERS,\n  payload: leaders\n});","map":{"version":3,"sources":["C:/Users/Deepak.Khairwal/HD/LENOVO/WEBSITES/React/confusion/src/redux/ActionCreators.js"],"names":["ActionTypes","DISHES","baseUrl","addFeedback","type","ADD_FEEDBACK","postFeedback","firstname","lastname","email","telnum","agree","contactType","message","dispatch","newFeedback","date","Date","toISOString","fetch","method","body","JSON","stringify","headers","credentials","then","res","ok","error","Error","status","statusText","response","json","console","log","alert","catch","addComment","comment","ADD_COMMENT","payload","postComment","dishId","rating","author","newComment","fetchDishes","dishesLoading","errmess","dishes","addDishes","dishesFailed","DISHES_LOADING","DISHES_FAILED","ADD_DISHES","fetchComments","comments","addComments","commentsFailed","COMMENTS_FAILED","ADD_COMMENTS","fetchPromos","promosLoading","promos","addPromos","promosFailed","PROMOS_LOADING","PROMOS_FAILED","ADD_PROMOS","fetchLeaders","leadersLoading","leaders","addLeaders","leadersFailed","LEADERS_LOADING","LEADERS_FAILED","ADD_LEADERS"],"mappings":"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","sourcesContent":["import * as ActionTypes from './ActionTypes';\r\nimport { DISHES } from '../shared/dishes';\r\nimport { baseUrl } from '../shared/baseUrl';\r\n\r\nexport const addFeedback = () => ({\r\n    type: ActionTypes.ADD_FEEDBACK,\r\n})\r\n\r\nexport const postFeedback = (firstname, lastname, email, telnum, agree, contactType, message) =>\r\n    dispatch => {\r\n        const newFeedback = {\r\n            firstname: firstname,\r\n            lastname: lastname,\r\n            email: email,\r\n            telnum: telnum,\r\n            agree: agree,\r\n            contactType: contactType,\r\n            message: message,\r\n        }\r\n        newFeedback.date = new Date().toISOString();\r\n        return fetch(baseUrl + 'feedback', {\r\n            method: \"POST\",\r\n            body: JSON.stringify(newFeedback),\r\n            headers: {\r\n                \"content-Type\": \"application/json\"\r\n            },\r\n            credentials: \"same-origin\"\r\n        })\r\n            .then(res => {\r\n                if (res.ok) {\r\n                    return res\r\n                } else {\r\n                    var error = new Error('Error ' + res.status + ': ' + res.statusText);\r\n                    error.response = res;\r\n                    throw error;\r\n                }\r\n            },\r\n                error => {\r\n                    throw error;\r\n                })\r\n            .then(response => response.json())\r\n            .then(res => {\r\n                console.log(res);\r\n                alert(JSON.stringify(res));\r\n                return dispatch(addFeedback());\r\n            })\r\n            .catch(error => {\r\n                console.log('post feedback', error.message);\r\n                alert('Your feedback could not be sent\\nError: ' + error.message);\r\n            });\r\n    }\r\n\r\nexport const addComment = (comment) => ({\r\n    type: ActionTypes.ADD_COMMENT,\r\n    payload: comment\r\n});\r\n\r\nexport const postComment = (dishId, rating, author, comment) => (dispatch) => {\r\n\r\n    const newComment = {\r\n        dishId: dishId,\r\n        rating: rating,\r\n        author: author,\r\n        comment: comment\r\n    };\r\n    newComment.date = new Date().toISOString();\r\n\r\n    return fetch(baseUrl + 'comments', {\r\n        method: \"POST\",\r\n        body: JSON.stringify(newComment),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        credentials: \"same-origin\"\r\n    })\r\n    .then(response => {\r\n        if (response.ok) {\r\n          return response;\r\n        } else {\r\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n          error.response = response;\r\n          throw error;\r\n        }\r\n      },\r\n      error => {\r\n            throw error;\r\n      })\r\n    .then(response => response.json())\r\n    .then(response => dispatch(addComment(response)))\r\n    .catch(error =>  { console.log('post comments', error.message); alert('Your comment could not be posted\\nError: '+error.message); });\r\n};\r\n\r\n\r\nexport const fetchDishes = () => (dispatch) => {\r\n\r\n    dispatch(dishesLoading(true));\r\n\r\n    return fetch(baseUrl + 'dishes')\r\n    .then(response => {\r\n        if (response.ok) {\r\n          return response;\r\n        } else {\r\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n          error.response = response;\r\n          throw error;\r\n        }\r\n      },\r\n      error => {\r\n            var errmess = new Error(error.message);\r\n            throw errmess;\r\n      })\r\n    .then(response => response.json())\r\n    .then(dishes => dispatch(addDishes(dishes)))\r\n    .catch(error => dispatch(dishesFailed(error.message)));\r\n}\r\n\r\nexport const dishesLoading = () => ({\r\n    type: ActionTypes.DISHES_LOADING\r\n});\r\n\r\nexport const dishesFailed = (errmess) => ({\r\n    type: ActionTypes.DISHES_FAILED,\r\n    payload: errmess\r\n});\r\n\r\nexport const addDishes = (dishes) => ({\r\n    type: ActionTypes.ADD_DISHES,\r\n    payload: dishes\r\n});\r\n\r\nexport const fetchComments = () => (dispatch) => {\r\n    return fetch(baseUrl + 'comments')\r\n    .then(response => {\r\n        if (response.ok) {\r\n          return response;\r\n        } else {\r\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n          error.response = response;\r\n          throw error;\r\n        }\r\n      },\r\n      error => {\r\n            var errmess = new Error(error.message);\r\n            throw errmess;\r\n      })\r\n    .then(response => response.json())\r\n    .then(comments => dispatch(addComments(comments)))\r\n    .catch(error => dispatch(commentsFailed(error.message)));\r\n};\r\n\r\nexport const commentsFailed = (errmess) => ({\r\n    type: ActionTypes.COMMENTS_FAILED,\r\n    payload: errmess\r\n});\r\n\r\nexport const addComments = (comments) => ({\r\n    type: ActionTypes.ADD_COMMENTS,\r\n    payload: comments\r\n});\r\n\r\nexport const fetchPromos = () => (dispatch) => {\r\n\r\n    dispatch(promosLoading());\r\n\r\n    return fetch(baseUrl + 'promotions')\r\n    .then(response => {\r\n        if (response.ok) {\r\n          return response;\r\n        } else {\r\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n          error.response = response;\r\n          throw error;\r\n        }\r\n      },\r\n      error => {\r\n            var errmess = new Error(error.message);\r\n            throw errmess;\r\n      })\r\n    .then(response => response.json())\r\n    .then(promos => dispatch(addPromos(promos)))\r\n    .catch(error => dispatch(promosFailed(error.message)));\r\n}\r\n\r\nexport const promosLoading = () => ({\r\n    type: ActionTypes.PROMOS_LOADING\r\n});\r\n\r\nexport const promosFailed = (errmess) => ({\r\n    type: ActionTypes.PROMOS_FAILED,\r\n    payload: errmess\r\n});\r\n\r\nexport const addPromos = (promos) => ({\r\n    type: ActionTypes.ADD_PROMOS,\r\n    payload: promos\r\n});\r\n\r\n\r\nexport const fetchLeaders = () => (dispatch) => {\r\n\r\n    dispatch(leadersLoading());\r\n\r\n    return fetch(baseUrl + 'leaders')\r\n    .then(response => {\r\n        if (response.ok) {\r\n          return response;\r\n        } else {\r\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n          error.response = response;\r\n          throw error;\r\n        }\r\n      },\r\n      error => {\r\n            var errmess = new Error(error.message);\r\n            throw errmess;\r\n      })\r\n    .then(response => response.json())\r\n    .then(leaders => dispatch(addLeaders(leaders)))\r\n    .catch(error => dispatch(leadersFailed(error.message)));\r\n}\r\n\r\nexport const leadersLoading = () => ({\r\n    type: ActionTypes.LEADERS_LOADING\r\n});\r\n\r\nexport const leadersFailed = (errmess) => ({\r\n    type: ActionTypes.LEADERS_FAILED,\r\n    payload: errmess\r\n});\r\n\r\nexport const addLeaders = (leaders) => ({\r\n    type: ActionTypes.ADD_LEADERS,\r\n    payload: leaders\r\n});\r\n"]},"metadata":{},"sourceType":"module"}